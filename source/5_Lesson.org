#+STARTUP:indent
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/styles.css"/>
#+HTML_HEAD_EXTRA: <script src="js/navbar.js" type="text/javascript"></script>

#+HTML_HEAD_EXTRA: <link href='http://fonts.googleapis.com/css?family=Ubuntu+Mono|Ubuntu' rel='stylesheet' type='text/css'>
#+OPTIONS: f:nil author:nil num:1 creator:nil timestamp:nil 
#+TITLE: Better Functions
#+AUTHOR: Stephen Brown

#+BEGIN_EXPORT html
<div id="underlay" onclick="underlayoff()">
</div>

<div id="stickyribbon">
    <ul>
      <li><a href="1_Lesson.html">Week1</a></li>
      <li><a href="2_Lesson.html">Week2</a></li>
      <li><a href="3_Lesson.html">Week3</a></li>
      <li><a href="4_Lesson.html">Week4</a></li>
      <li><a href="5_Lesson.html">Week5</a></li>
      <li><a href="6_Lesson.html">Week6</a></>
      <li><a href="evaluation.html">Evaluation</a></li>

    </ul>
  </div>

<div id="overlay" onclick="overlayoff()">
</div>
<div id=overlayMenu>
<p onclick="overlayon('hsla(0, 0%, 50%, 0.5)')">Grey overlay</p>
<p onclick="underlayon('hsla(300,100%,50%, 0.3)')">Pink</p>
<p onclick="underlayon('hsla(80, 90%, 40%, 0.4)')">Green</p>
<p onclick="underlayon('hsla(240,100%,50%,0.2)')">Blue</p>
<p onclick="underlayon('hsla(40,100%,50%,0.3)')">Cream</p>
<p onclick="underlayon('hsla(300,100%,40%,0.3)')">Liliac</p>
<p onclick="underlayon('hsla(300,100%,25%,0.3)')">Purple</p>
<p onclick="underlayon('hsla(60,100%,50%,0.3)')">Yellow</p>
</div>
<div class=ribbon>
<a href="https://github.com/stsb11/turtle">Fork me on GitHub</a>
</div>
<center>
<img src='img/turtle.jpg' width=33%>
</center>

#+END_EXPORT

* COMMENT Use as a template
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:

** Research It
:PROPERTIES:
:HTML_CONTAINER_CLASS: research
:END:

** Design It
:PROPERTIES:
:HTML_CONTAINER_CLASS: design
:END:

** Build It
:PROPERTIES:
:HTML_CONTAINER_CLASS: build
:END:

** Test It
:PROPERTIES:
:HTML_CONTAINER_CLASS: test
:END:

** Run It
:PROPERTIES:
:HTML_CONTAINER_CLASS: run
:END:

** Document It
:PROPERTIES:
:HTML_CONTAINER_CLASS: document
:END:

** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:

** Program It
:PROPERTIES:
:HTML_CONTAINER_CLASS: program
:END:

** Try It
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:

** Badge It
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:

** Save It
:PROPERTIES:
:HTML_CONTAINER_CLASS: save
:END:

* Objectives
:PROPERTIES:
:HTML_CONTAINER_CLASS: objectives
:END:
** Developing the Programming and Development and Algorithm learning strands, specifically:
- further developing understanding of repetitions (*loops*) in programming and being able to use *for loops* in creating patterns.
- further developing understanding of *functions* in programming and being able to create simple functions that serve a single purpose.
- developing understanding of the need for data structure *list* and being able to apply list data structure.
* Lists
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- A standard variable is handy for storing a single piece of information.
#+BEGIN_EXAMPLE
yourName='Jane'
yourAge=50
likeCrisps=True
#+END_EXAMPLE  


- Sometimes, it's handy to store several pieces of information so that we can access them all when we need them. For this, we use a *list*. 
- Type these commands in the *INTERPRETER* one at a time to get the hang of manipulating lists:

#+BEGIN_EXAMPLE
someColours=['Red','Blue','Pink','Black']

print(someColours[0])
someColours.append('Green')

print(someColours)

someColours.sort()
print(someColours)

someColours.reverse()
print(someColours)

someColours.pop()
print(someColours)

someColours.pop(1)
print(someColours)
#+end_EXAMPLE

- You can type the commands into this Trinket, if you find it easier…
#+BEGIN_EXPORT html
<iframe src="https://trinket.io/embed/python/b3e5f22215?runOption=console" width="100%" height="600" frameborder="0" marginwidth="0" marginheight="0" allowfullscreen=""></iframe>
#+END_EXPORT
** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:
- Using lists, we can get more flexibility over the patterns we can create. 
#+begin_example  
import turtle

wn = turtle.Screen()
wn.bgcolor("white") 
wn.title("List Practice")

tess = turtle.Turtle()
tess.pensize(5)

def colouredSquare(sideLength,newColour):
    tess.color(newColour)
    for x in range(4):
        tess.forward(sideLength)
        tess.left(90)

colourList=['red','green','blue','orange','hotpink','purple']

for eachColour in colourList:
    colouredSquare(75,eachColour)  # Draw a square in the current colour.

    # The len() function will tell you how long a list is, or how many characters are in a string.
    # I'm using it here to calculate the angle I need, based on the size of the list.
    tess.left(360/len(colourList))

wn.mainloop()
#+END_EXAMPLE 

- As always, this Trinket may be handy to use to experiment with…
#+BEGIN_EXPORT html
<iframe src="https://trinket.io/embed/python/5b19163d53" width="100%" height="600" frameborder="0" marginwidth="0" marginheight="0" allowfullscreen=""></iframe>
#+END_EXPORT

* Assessment
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Badge It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- *Silver:* Modify the code to draw the first square with side lengths of 20, the second with size 40, third with 60 and so on. 
- *Gold:* Change the code so that the user can enter five colours that are used to draw a pattern of your choice.
- *Platinum:* Change the code so that the user can enter as many colours as they like, and have a shape drawn with that many sides. E.g.

#+begin_example
Name a Python colour (XYZ when done): red
Name a Python colour (XYZ when done): blue
Name a Python colour (XYZ when done): green
Name a Python colour (XYZ when done): XYZ
Here goes...
#+end_example

[[./img/w5.png]]

- /Tip:/ You'll need to use a [[https://www.bournetocode.com/projects/7-CS-Turing/pages/6_Lesson.html][WHILE]] loop to make this work. 
